---
import Parser from "rss-parser";

import Layout from "../layouts/Layout.astro";
import ListRow from "../components/ListRow.astro";
import type { Props as ListProps } from "../components/ListRow.astro";

function nonNullable<T>(value: T): value is NonNullable<T> {
    return value !== null && value !== undefined;
}

function getCategory(url?: string): ListProps["category"] {
    if (!url) {
        return "NEWS";
    }
    if (url.includes("smashingmagazine")) {
        return "DEV";
    }
    if (url.includes("mozilla")) {
        return "DEV";
    }
    if (url.includes("hnrss")) {
        return "DEV";
    }
    if (url.includes("techcrunch")) {
        return "TECH";
    }
    if (url.includes("theverge")) {
        return "TECH";
    }
    if (url.includes("macrumors")) {
        return "TECH";
    }
    if (url.includes("crunchyroll")) {
        return "TV";
    }
    return "NEWS";
}

const d = new Date();
const now = d.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
});
const week = d.setDate(d.getDate() - 7);

const parser = new Parser();

const list = (
    await Promise.allSettled(
        [
            "https://www.smashingmagazine.com/feed/",
            "https://developer.mozilla.org/en-US/blog/rss.xml",
            "https://hnrss.org/newest",
            "https://techcrunch.com/feed",
            "https://theverge.com/rss/frontpage",
            "https://feeds.macrumors.com/MacRumors-All",
            "http://feeds.feedburner.com/crunchyroll/rss/anime",
        ].map(async (src) => {
            try {
                const feed = await parser.parseURL(src);
                return feed.items.map((i) => ({
                    category: getCategory(feed.feedUrl),
                    feed: feed.title,
                    title: i.title,
                    href: i.link,
                    date: i.pubDate ? new Date(i.pubDate) : undefined,
                }));
            } catch (error) {
                console.error("Error fetching feed" + src, error);
            }
        })
    )
)
    .filter((r) => r.status === "fulfilled")
    .flatMap((r) => r.value)
    .filter(nonNullable)
    .filter((r) => (r.date ? Number(r.date) >= week : true))
    .sort((a, b) => (b.date ?? new Date()).getTime() - (a.date ?? new Date()).getTime());
---

<Layout title="rss">
    <main>
        <time>{now}</time>
        <ul>
            {list.map((item) => <ListRow {...item} />)}
        </ul>
    </main>
</Layout>

<style>
    main {
        padding: 2rem;
        color: white;
    }
    time {
        margin-bottom: 1rem;
        font-size: 1rem;
        color: var(--text-secondary);
    }
    ul {
        display: flex;
        flex-direction: column;
        row-gap: 1.5rem;
        padding: 0;
    }
</style>
