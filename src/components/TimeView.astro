---
// Simple timezone viewer component
---

<div class="time-viewer">
    <button class="toggle-button" id="toggle-button">
        <span class="toggle-time" id="toggle-time">12:00 PM</span>
        <span class="toggle-arrow" id="toggle-arrow">▼</span>
    </button>

    <div class="collapsible-content" id="collapsible-content">
        <div class="slider-container">
            <div class="slider-tooltip" id="tooltip">Now</div>
            <input
                type="range"
                id="time-slider"
                min="-720"
                max="720"
                value="0"
                class="time-slider"
            />
        </div>

        <div class="cities-grid" id="cities">
            <!-- Cities will be populated by JavaScript -->
        </div>

        <div class="controls-row">
            <input
                type="text"
                class="timezone-input"
                id="timezone-input"
                list="timezone-list"
                autocomplete="off"
            />
            <button class="reset-button" id="reset-button"> ↻ </button>
            <datalist id="timezone-list"></datalist>
        </div>
    </div>
</div>

<style is:global>
    .toggle-button {
        width: 100%;
        padding: 0.75rem 1rem;
        background: #ffffff;
        cursor: pointer;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: none;
        border: none;
    }

    .toggle-button:hover {
        background: #f8f9fa;
    }

    .toggle-time {
        font-size: 1rem;
        font-weight: 500;
        color: #212529;
        font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
            "Courier New", monospace;
    }

    .toggle-arrow {
        font-size: 0.75rem;
        color: #6c757d;
        transition: transform 0.2s ease;
    }

    .toggle-button.expanded .toggle-arrow {
        transform: rotate(180deg);
    }

    .time-viewer {
        max-width: 600px;
        font-family:
            system-ui,
            -apple-system,
            sans-serif;
        font-size: 1rem;
    }

    .collapsible-content {
        padding: 1rem;
        overflow: hidden;
        transition:
            max-height 0.3s ease,
            padding 0.3s ease;
    }

    .collapsible-content.collapsed {
        max-height: 0;
        padding: 0 1rem;
    }

    .slider-container {
        position: relative;
        padding: 1rem 0;
    }

    .slider-tooltip {
        position: absolute;
        top: 12px;
        left: 50%;
        transform: translateX(-50%);
        background: #212529;
        color: white;
        padding: 4px 8px;
        font-size: 0.75rem;
        font-weight: 500;
        white-space: nowrap;
        opacity: 0;
        transition: opacity 0.2s;
        z-index: 10;
        pointer-events: none;
    }

    .slider-tooltip.show {
        opacity: 1;
    }

    .time-slider {
        width: 100%;
        height: 12px;
        background: transparent;
        outline: none;
        position: relative;
        z-index: 2;
        cursor: pointer;
    }

    .controls-row {
        display: flex;
        gap: 0.5rem;
        align-items: center;
        margin-bottom: 1rem;
    }

    .reset-button {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        padding: 0.5rem;
        font-size: 0.875rem;
        cursor: pointer;
        flex-shrink: 0;
    }

    .reset-button:hover {
        background: #e9ecef;
    }

    .cities-grid {
        display: grid;
        gap: 0;
    }

    .city-row {
        display: grid;
        grid-template-columns: auto 1fr auto 120px;
        align-items: center;
        padding: 0.75rem 1rem;
        transition: background-color 0.2s;
        gap: 1rem;
    }

    .city-row:last-child {
        border-bottom: none;
    }

    .city-row:hover {
        background: #f8f9fa;
    }

    .city-info {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
    }

    .city-name {
        font-size: 1rem;
        font-weight: 500;
        color: #212529;
    }

    .city-offset {
        font-size: 0.875rem;
        color: #6c757d;
        font-weight: 400;
    }

    .city-icon {
        font-size: 1.25rem;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 1.5rem;
        height: 1.5rem;
    }

    .city-time {
        font-size: 1.125rem;
        font-weight: 500;
        color: #212529;
        text-align: right;
        font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas,
            "Courier New", monospace;
        line-height: 1;
    }

    /* Time of day colors - clean and simple */
    .city-row.morning {
        --city-color: #fd7e14; /* orange */
    }
    .city-row.day {
        --city-color: #198754; /* green */
    }
    .city-row.evening {
        --city-color: #dc3545; /* red */
    }
    .city-row.night {
        --city-color: #0d6efd; /* blue */
    }

    /* Time-specific colors for time display */
    .city-row.morning .city-time {
        color: #fd7e14;
    }
    .city-row.day .city-time {
        color: #198754;
    }
    .city-row.evening .city-time {
        color: #dc3545;
    }
    .city-row.night .city-time {
        color: #6c757d;
    }

    @media (max-width: 640px) {
        .time-viewer {
            margin: 0.5rem;
        }

        .toggle-button {
            padding: 0.5rem 0.75rem;
        }

        .toggle-time {
            font-size: 0.875rem;
        }

        .collapsible-content {
            padding: 0.75rem;
        }

        .collapsible-content.collapsed {
            padding: 0 0.75rem;
        }

        .city-row {
            grid-template-columns: auto 1fr auto auto;
            gap: 0.75rem;
            padding: 0.5rem 0.75rem;
        }

        .city-name {
            font-size: 0.875rem;
        }

        .city-offset {
            font-size: 0.75rem;
        }

        .city-icon {
            font-size: 1rem;
            width: 1.25rem;
            height: 1.25rem;
        }

        .city-time {
            font-size: 1rem;
        }

        .slider-container {
            padding: 0.75rem 0;
            margin-bottom: 0.75rem;
        }
    }

    /* Table-like headers */
    .cities-grid::before {
        content: "";
        display: none;
    }

    .timezone-input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid #dee2e6;
        background: #ffffff;
    }

    .timezone-input:focus {
        outline: none;
        border-color: #0d6efd;
    }

    .city-row .remove-btn {
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
        padding: 0.25rem;
        font-size: 1rem;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .city-row:hover .remove-btn {
        opacity: 1;
    }

    .city-row .remove-btn:hover {
        color: #dc3545;
    }

    /* Clean, readable typography */
    * {
        box-sizing: border-box;
    }
</style>

<script>
    function loadTimezones(): string[] {
        const stored = localStorage.getItem("timeview-timezones");
        return stored
            ? JSON.parse(stored)
            : ["Europe/London"];
    }

    function saveTimezones(timezones: string[]): void {
        localStorage.setItem("timeview-timezones", JSON.stringify(timezones));
    }

    function getTimezoneLabel(timezone: string): string {
        return timezone.split("/").pop()?.replace(/_/g, " ") || timezone;
    }

    class SimpleTimezoneViewer {
        private slider: HTMLInputElement;
        private tooltip: HTMLDivElement;
        private citiesContainer: HTMLDivElement;
        private toggleButton: HTMLButtonElement;
        private toggleTime: HTMLSpanElement;
        private toggleArrow: HTMLSpanElement;
        private collapsibleContent: HTMLDivElement;
        private resetButton: HTMLButtonElement;
        private timezoneInput: HTMLInputElement;
        private timezoneList: HTMLDataListElement;
        private offsetMinutes: number;
        private isExpanded: boolean;
        private timezones: string[];

        constructor() {
            this.slider = document.getElementById("time-slider") as HTMLInputElement;
            this.tooltip = document.getElementById("tooltip") as HTMLDivElement;
            this.citiesContainer = document.getElementById("cities") as HTMLDivElement;
            this.toggleButton = document.getElementById("toggle-button") as HTMLButtonElement;
            this.toggleTime = document.getElementById("toggle-time") as HTMLSpanElement;
            this.toggleArrow = document.getElementById("toggle-arrow") as HTMLSpanElement;
            this.collapsibleContent = document.getElementById("collapsible-content") as HTMLDivElement;
            this.resetButton = document.getElementById("reset-button") as HTMLButtonElement;
            this.timezoneInput = document.getElementById("timezone-input") as HTMLInputElement;
            this.timezoneList = document.getElementById("timezone-list") as HTMLDataListElement;
            this.offsetMinutes = 0;
            this.isExpanded = false;
            this.timezones = loadTimezones();

            this.init();
        }

        init() {
            this.renderCities();
            this.populateTimezoneList();
            this.setupEventListeners();
            this.updateDisplay();
            this.updateToggleTime();
            // Start collapsed
            this.collapsibleContent.classList.add("collapsed");
        }

        setupEventListeners() {
            // Toggle button
            this.toggleButton.addEventListener("click", () => {
                this.toggleCollapse();
            });

            // Slider events
            this.slider.addEventListener("input", (e: Event) => {
                const target = e.target as HTMLInputElement;
                this.offsetMinutes = parseInt(target.value);
                this.updateDisplay();
                this.updateToggleTime();
                this.showTooltip();
            });

            this.slider.addEventListener("mouseenter", () => this.showTooltip());
            this.slider.addEventListener("mouseleave", () => this.hideTooltip());

            // Reset button
            this.resetButton.addEventListener("click", () => {
                this.resetToNow();
            });

            // Timezone input
            this.timezoneInput.addEventListener("input", (e: Event) => {
                const target = e.target as HTMLInputElement;
                const value = target.value;
                if (Intl.supportedValuesOf("timeZone").includes(value)) {
                    this.addTimezone(value);
                    target.value = "";
                }
            });
        }

        toggleCollapse() {
            this.isExpanded = !this.isExpanded;

            if (this.isExpanded) {
                this.toggleButton.classList.add("expanded");
                this.collapsibleContent.classList.remove("collapsed");
            } else {
                this.toggleButton.classList.remove("expanded");
                this.collapsibleContent.classList.add("collapsed");
            }
        }

        updateToggleTime() {
            // Show current local time in the toggle button
            const now = new Date();
            const offsetTime = new Date(now.getTime() + this.offsetMinutes * 60000);
            const timeString = offsetTime.toLocaleString("en-US", {
                weekday: "short",
                month: "short",
                day: "numeric",
                hour: "numeric",
                minute: "2-digit",
                hour12: true,
            });
            this.toggleTime.textContent = timeString;
        }

        resetToNow() {
            this.offsetMinutes = 0;
            this.slider.value = "0";
            this.updateDisplay();
            this.updateToggleTime();
            this.hideTooltip();
        }

        showTooltip() {
            this.tooltip.classList.add("show");
            this.updateTooltipPosition();
        }

        hideTooltip() {
            this.tooltip.classList.remove("show");
        }

        updateTooltipPosition() {
            const percent = ((this.offsetMinutes + 720) / 1440) * 100;
            this.tooltip.style.left = `${percent}%`;
        }

        formatOffset(minutes: number): string {
            if (minutes === 0) return "Now";
            const hours = Math.abs(Math.floor(minutes / 60));
            const mins = Math.abs(minutes % 60);
            const sign = minutes >= 0 ? "+" : "-";

            if (mins === 0) {
                return `${sign}${hours}h`;
            }
            return `${sign}${hours}h ${mins}m`;
        }

        getCityTime(timezone: string): string {
            const now = new Date();
            const offsetTime = new Date(now.getTime() + this.offsetMinutes * 60000);

            try {
                const timeString = offsetTime.toLocaleString("en-US", {
                    timeZone: timezone,
                    hour: "numeric",
                    minute: "2-digit",
                    hour12: true,
                });
                return timeString;
            } catch {
                return "12:00 AM";
            }
        }

        getTimeOfDay(timezone: string): string {
            const now = new Date();
            const offsetTime = new Date(now.getTime() + this.offsetMinutes * 60000);

            try {
                const hour = parseInt(
                    offsetTime.toLocaleString("en-US", {
                        timeZone: timezone,
                        hour: "numeric",
                        hour12: false,
                    })
                );

                if (hour >= 6 && hour < 12) return "morning";
                if (hour >= 12 && hour < 18) return "day";
                if (hour >= 18 && hour < 22) return "evening";
                return "night";
            } catch {
                return "day";
            }
        }

        getTimezoneOffset(timezone: string): string {
            try {
                const now = new Date();
                const localTime = new Date();
                const targetTime = new Date(
                    now.toLocaleString("en-US", { timeZone: timezone })
                );

                const diffHours = Math.round(
                    (targetTime.getTime() - localTime.getTime()) / (1000 * 60 * 60)
                );

                if (diffHours === 0) return "same time";
                const sign = diffHours > 0 ? "+" : "";
                return `${sign}${diffHours}h`;
            } catch {
                return "UTC";
            }
        }

        renderCities() {
            const html = this.timezones
                .map(
                    (timezone) => `
                <div class="city-row" data-timezone="${timezone}">
                    <button class="remove-btn" data-timezone="${timezone}">×</button>
                    <div class="city-info">
                        <div class="city-name">${getTimezoneLabel(timezone)}</div>
                        <div class="city-offset"></div>
                    </div>
                    <div class="city-icon"></div>
                    <div class="city-time"></div>
                </div>
            `
                )
                .join("");

            this.citiesContainer.innerHTML = html;
            this.setupRemoveButtons();
        }

        setupRemoveButtons(): void {
            this.citiesContainer.querySelectorAll(".remove-btn").forEach((btn) => {
                btn.addEventListener("click", (e: Event) => {
                    const target = e.target as HTMLButtonElement;
                    const timezone = target.getAttribute("data-timezone");
                    if (timezone) {
                        this.removeTimezone(timezone);
                    }
                });
            });
        }

        addTimezone(timezone: string): void {
            if (!this.timezones.includes(timezone)) {
                this.timezones.push(timezone);
                saveTimezones(this.timezones);
                this.renderCities();
                this.populateTimezoneList();
                this.updateDisplay();
            }
        }

        removeTimezone(timezone: string): void {
            this.timezones = this.timezones.filter((tz: string) => tz !== timezone);
            saveTimezones(this.timezones);
            this.renderCities();
            this.populateTimezoneList();
            this.updateDisplay();
        }

        populateTimezoneList() {
            const allTimezones = Intl.supportedValuesOf("timeZone");
            const options = allTimezones
                .filter((tz) => !this.timezones.includes(tz))
                .sort()
                .map(
                    (tz) =>
                        `<option value="${tz}">${getTimezoneLabel(tz)} (${tz})</option>`
                )
                .join("");

            this.timezoneList.innerHTML = options;
        }

        updateDisplay(): void {
            this.tooltip.textContent = this.formatOffset(this.offsetMinutes);
            this.updateToggleTime();

            // Update each city
            const cityRows = this.citiesContainer.querySelectorAll(".city-row");
            cityRows.forEach((row) => {
                const htmlRow = row as HTMLElement;
                const timezone = htmlRow.dataset.timezone;
                if (!timezone) return;

                const timeElement = row.querySelector(".city-time");
                const offsetElement = row.querySelector(".city-offset");
                const iconElement = row.querySelector(".city-icon");

                if (timeElement) timeElement.textContent = this.getCityTime(timezone);
                if (offsetElement) offsetElement.textContent = this.getRelativeTimeText(timezone);

                // Update time of day class and icon
                const timeOfDay = this.getTimeOfDay(timezone);
                htmlRow.className = `city-row ${timeOfDay}`;
                if (iconElement) iconElement.textContent = this.getTimeIcon(timeOfDay);
            });
        }

        getRelativeTimeText(timezone: string): string {
            try {
                const now = new Date();
                const localTime = new Date();
                const targetTime = new Date(
                    now.toLocaleString("en-US", { timeZone: timezone })
                );

                const diffHours = Math.round(
                    (targetTime.getTime() - localTime.getTime()) / (1000 * 60 * 60)
                );
                const diffMinutes =
                    Math.round(
                        (targetTime.getTime() - localTime.getTime()) / (1000 * 60)
                    ) % 60;

                if (diffHours === 0 && diffMinutes === 0) return "Today, same time";

                let text = "Today, ";
                const absHours = Math.abs(diffHours);
                const absMinutes = Math.abs(diffMinutes);
                const direction =
                    diffHours > 0 || (diffHours === 0 && diffMinutes > 0)
                        ? "ahead"
                        : "behind";

                if (absHours > 0) {
                    text += `${absHours} hour${absHours !== 1 ? "s" : ""}`;
                    if (absMinutes > 0) {
                        text += ` ${absMinutes} minute${absMinutes !== 1 ? "s" : ""}`;
                    }
                } else if (absMinutes > 0) {
                    text += `${absMinutes} minute${absMinutes !== 1 ? "s" : ""}`;
                }

                return text + ` ${direction}`;
            } catch {
                return "Today";
            }
        }

        getTimeIcon(timeOfDay: string): string {
            switch (timeOfDay) {
                case "morning":
                    return "🌅";
                case "day":
                    return "☀️";
                case "evening":
                    return "🌇";
                case "night":
                    return "🌙";
                default:
                    return "☀️";
            }
        }
    }

    // Initialize when DOM is ready
    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
            new SimpleTimezoneViewer();
        });
    } else {
        new SimpleTimezoneViewer();
    }
</script>
